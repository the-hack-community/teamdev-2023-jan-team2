export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Image = {
  __typename?: 'Image';
  author: User;
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  keyword: Scalars['String'];
  url: Scalars['String'];
};

export type Mutation = {
  __typename?: 'Mutation';
  createImage: Image;
  createUser: User;
  deleteImage: Scalars['Boolean'];
  deleteUser: Scalars['Boolean'];
  login?: Maybe<User>;
  updateAvator: User;
  updateImageComment?: Maybe<Image>;
  updatePassword: Scalars['Boolean'];
  updateProfile: User;
};


export type MutationCreateImageArgs = {
  keyword: Scalars['String'];
};


export type MutationCreateUserArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationDeleteImageArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteUserArgs = {
  id: Scalars['ID'];
};


export type MutationLoginArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationUpdateAvatorArgs = {
  id: Scalars['ID'];
  image: Scalars['String'];
};


export type MutationUpdateImageCommentArgs = {
  description?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};


export type MutationUpdatePasswordArgs = {
  id: Scalars['ID'];
  oldPassword: Scalars['String'];
  password: Scalars['String'];
};


export type MutationUpdateProfileArgs = {
  description?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: InputMaybe<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  getImage?: Maybe<Image>;
  getImages?: Maybe<Array<Maybe<Image>>>;
  getImagesByKeyword?: Maybe<Array<Maybe<Image>>>;
  getUser?: Maybe<User>;
  getUsers?: Maybe<Array<Maybe<User>>>;
};


export type QueryGetImageArgs = {
  id: Scalars['ID'];
};


export type QueryGetImagesByKeywordArgs = {
  query?: InputMaybe<Scalars['String']>;
};


export type QueryGetUserArgs = {
  id: Scalars['ID'];
};

export type User = {
  __typename?: 'User';
  avatorUrl?: Maybe<Scalars['String']>;
  bio?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  id: Scalars['ID'];
  password: Scalars['String'];
  username: Scalars['String'];
};
