export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
  /** Represents untyped JSON */
  JSON: any;
};

/** Autogenerated input type of CreateImage */
export type CreateImageInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  description: Scalars['String'];
  keyword?: InputMaybe<Scalars['String']>;
};

/** Autogenerated input type of DestroyImage */
export type DestroyImageInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  description: Scalars['String'];
  id: Scalars['ID'];
};

export type Image = {
  __typename?: 'Image';
  clipSkip?: Maybe<Scalars['Int']>;
  createdAt: Scalars['ISO8601DateTime'];
  description?: Maybe<Scalars['String']>;
  height?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  keyword?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  negativePrompt?: Maybe<Scalars['String']>;
  prompt?: Maybe<Scalars['String']>;
  sampler?: Maybe<Scalars['String']>;
  scale?: Maybe<Scalars['Float']>;
  seed?: Maybe<Scalars['Float']>;
  steps?: Maybe<Scalars['Int']>;
  updatedAt: Scalars['ISO8601DateTime'];
  url?: Maybe<Scalars['String']>;
  userId: Scalars['Int'];
  width?: Maybe<Scalars['Int']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createImage?: Maybe<Image>;
  destroyImage?: Maybe<Image>;
  updateImageDescription?: Maybe<Image>;
};


export type MutationCreateImageArgs = {
  input: CreateImageInput;
};


export type MutationDestroyImageArgs = {
  input: DestroyImageInput;
};


export type MutationUpdateImageDescriptionArgs = {
  input: UpdateImageDescriptionInput;
};

export type Query = {
  __typename?: 'Query';
  image: Image;
  /** List all images */
  images: Array<Image>;
  imagesByKeyword: Array<Image>;
  user: User;
  /** List all users */
  users: Array<User>;
};


export type QueryImageArgs = {
  id: Scalars['ID'];
};


export type QueryImagesByKeywordArgs = {
  keyword: Scalars['String'];
};


export type QueryUserArgs = {
  id: Scalars['ID'];
};

/** Autogenerated input type of UpdateImageDescription */
export type UpdateImageDescriptionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  description: Scalars['String'];
  id: Scalars['ID'];
};

export type User = {
  __typename?: 'User';
  allowPasswordChange?: Maybe<Scalars['Boolean']>;
  biography?: Maybe<Scalars['String']>;
  confirmationSentAt?: Maybe<Scalars['ISO8601DateTime']>;
  confirmationToken?: Maybe<Scalars['String']>;
  confirmedAt?: Maybe<Scalars['ISO8601DateTime']>;
  createdAt: Scalars['ISO8601DateTime'];
  email?: Maybe<Scalars['String']>;
  encryptedPassword: Scalars['String'];
  id: Scalars['ID'];
  image?: Maybe<Scalars['String']>;
  images?: Maybe<Array<Image>>;
  name?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  provider: Scalars['String'];
  rememberCreatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  resetPasswordSentAt?: Maybe<Scalars['ISO8601DateTime']>;
  resetPasswordToken?: Maybe<Scalars['String']>;
  tokens?: Maybe<Scalars['JSON']>;
  uid: Scalars['String'];
  unconfirmedEmail?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
};
